<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sönke Rohde]]></title>
  <link href="http://srohde.github.io/atom.xml" rel="self"/>
  <link href="http://srohde.github.io/"/>
  <updated>2013-06-25T22:00:14-07:00</updated>
  <id>http://srohde.github.io/</id>
  <author>
    <name><![CDATA[Sönke Rohde]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[zsh shell]]></title>
    <link href="http://srohde.github.io/blog/2013/06/25/zsh-shell/"/>
    <updated>2013-06-25T09:21:00-07:00</updated>
    <id>http://srohde.github.io/blog/2013/06/25/zsh-shell</id>
    <content type="html"><![CDATA[<p>The terminal is next to the editor probably the most important tool for a developer. Being comfortable executing shell commands increases productivty significantly. And that&rsquo;s what it&rsquo;s about at the end. Being able to focus on solving the problem and not dealing with tools and workflows to get there. For a long time I am using <a href="http://www.iterm2.com/">iTerm 2</a> but that&rsquo;s only the terminal and does not change the actuall shell.</p>

<p>I was browsing <a href="http://dotfiles.github.io/">dotfiles</a> and came across <a href="http://zsh.sourceforge.net/">zsh</a>, an alternative to the default bash shell on OSX.</p>

<p>I&rsquo;ve been using zsh for a couple of weeks now and like especially the dot-files <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> which provide a great default configuration and git prompts. Here the steps on how I&rsquo;ve set things up:</p>

<p>Make zsh default shell:</p>

<pre><code>chsh -s /bin/zsh
</code></pre>

<p>Open a new terminal window to see zsh!</p>

<p>Install oh-my-zsh (you gotta trust that script so make sure you want to do that):</p>

<pre><code>curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
</code></pre>

<p>Now some configiration. Edit <code>~/zshrc</code>.
I like the default theme but set <code>ZSH_THEME="random"</code> and open some new shells to explore some other themes you might like better.</p>

<p>Oh-my-zsh comes with a bunch of plugins and only a few are set by default.
Here is my plugin list:</p>

<pre><code>plugins=(cake git sublime osx git-flow git-extras npm node theme web-search battery)
</code></pre>

<p>I always use the <a href="http://www.sublimetext.com/2">Sublime Text 2</a> plugin which just creates a <code>st</code> alias.</p>

<p>The web-search plugin is quite nice since now you can <code>google</code> or <code>bing</code> from the command line:</p>

<pre><code>$ google bing
$ bing google
</code></pre>

<p>Explore all the plugins in <code>~/.oh-my-zsh/plugins</code> to enable what fits your workflow. I discovered <a href="https://github.com/visionmedia/git-extras">git-extras</a> doing this which is really awesome.</p>

<p>If you want to use <a href="https://github.com/rupa/z">z</a> here two lines how to set it up:</p>

<pre><code>git clone git@github.com:rupa/z.git ~/.z
echo \\n. ~/.z/z.sh &gt;&gt; ~/.zshrc
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Location Based Services with MongoDB]]></title>
    <link href="http://srohde.github.io/blog/2013/06/11/location-based-services-with-mongodb/"/>
    <updated>2013-06-11T08:00:00-07:00</updated>
    <id>http://srohde.github.io/blog/2013/06/11/location-based-services-with-mongodb</id>
    <content type="html"><![CDATA[<p><a href="http://www.mongodb.org/">MongoDB</a> is an open-source NoSQL database. It offers great features to build <a href="https://en.wikipedia.org/wiki/Location-based_service">Location Based Services</a> with build in support for <a href="http://docs.mongodb.org/manual/applications/geospatial-indexes/">Geospatial Indexes and Queries</a>.</p>

<p>I&rsquo;ve been using MongoDB with <a href="http://nodejs.org">Node.js</a> on <a href="http://heroku.com">Heroku</a> so here a quick walk through on how to set it up and use it:</p>

<h2>Setup</h2>

<h3>Local</h3>

<p>Install and Run:</p>

<pre><code>$ brew install mongo
$ mongod
</code></pre>

<p>On lesson I&rsquo;ve learned is to always try to use MongoDB from the shell first before you start with actual code. <strong>After</strong> having the command right in the shell translate it into code and test your actual implementation. Here some shell commands to get you started:</p>

<pre><code>$ mongo
&gt; use mydbname
</code></pre>

<p>For this example we store locations in a collection called <code>locations</code>
Make sure you have set the geo spacial index:</p>

<pre><code>&gt; db.locations.ensureIndex({loc: '2d'})
&gt; db.locations.getIndexKeys()
</code></pre>

<p>Should output <code>[ { "_id" : 1 }, { "loc" : "2d" } ]</code></p>

<h3>Heroku</h3>

<p>On the Heroku side it&rsquo;s pretty easy to set up as well:</p>

<pre><code>$ heroku addons:add mongohq:sandbox
</code></pre>

<p>To make sure the location index is also working on Heroku, login, select your app and select the MongoHQ add-on. This brings you to the MongoHQ admin interface. Then select your locations collection and make sure the <code>Indexes</code> are configured correctly. In my case it shows as <code>{ key: { loc: "2d" }, v: 1, ns: "appXXX.locations", name: "loc_2d" }</code></p>

<h2>MongoDB Shell</h2>

<h3>Insert Location</h3>

<p>When you insert a new location it&rsquo;s essential to store the location in an array with [lon, lat] and <strong>not</strong> [lat, lon]. This was a mistake I made first and it took me a while to figure that out because all my queries were returning the wrong stuff.</p>

<p>Let&rsquo;s insert some example locations (I&rsquo;ve been using <a href="http://www.latlong.net/">LATLONG.net</a>):</p>

<pre><code>&gt; db.locations.insert({name: "Ferry Building", city: "San Francisco", loc:[-122.3937, 37.7955]})
&gt; db.locations.insert({name: "Union Square", city: "San Francisco", loc:[-122.407437, 37.787994]})
&gt; db.locations.insert({name: "Duboce Park", city: "San Francisco", loc:[-122.433453, 37.769422]}) 
&gt; db.locations.insert({name: "Parque Ibirapuera", city: "São Paulo",loc:[-46.657490, -23.586996]})
&gt; db.locations.insert({name: "Big Ben", city: "London",loc:[-0.124575, 51.500705]})
&gt; db.locations.insert({name: "Fischmarkt", city: "Hamburg",loc:[9.937740, 53.544527]})
&gt; db.locations.insert({name: "Opera House", city: "Sydney",loc:[151.214993, -33.857767]})
</code></pre>

<p>Now you can query all locations with:</p>

<pre><code>&gt; db.locations.find()
</code></pre>

<p>Just as a sanity check: Everything west of Greenwich has a longitude &lt; 0 and east > 0. Everything in the northern hemisphere has a latitude > 0 and in the southern hemisphere &lt; 0 or as Wikipedia puts it:</p>

<blockquote><p>In geography, latitude (φ) is a geographic coordinate that specifies the north-south position of a point on the Earth&#8217;s surface. Latitude is an angle (defined below) which ranges from 0° at the Equator to 90° (North or South) at the poles.</p><footer><strong>http://en.wikipedia.org/wiki/Latitude</strong></footer></blockquote>




<blockquote><p>Longitude (/ˈlɒndʒɨtjuːd/ or /ˈlɒŋɡɨtjuːd/),[1] is a geographic coordinate that specifies the east-west position of a point on the Earth&#8217;s surface. [&#8230;] The longitude of other places is measured as an angle east or west from the Prime Meridian, ranging from 0° at the Prime Meridian to +180° eastward and −180° westward.</p><footer><strong>http://en.wikipedia.org/wiki/Longitude</strong></footer></blockquote>


<h3>Query Locations</h3>

<p>After we have inserted some test locations let&rsquo;s try to make a geospatial query. In my case I wanted to find locations close to the current location so let&rsquo;s pretend we are at the Ferry Building in San Francisco.</p>

<pre><code>&gt; db.runCommand({geoNear: "locations", near: [-122.3937, 37.7955], num: 10, spherical:true})
</code></pre>

<p>The result is ordered by distance and the Ferry Building should be on top with a <code>dis</code> of 0. To have the distance in a human readable unit you can use the <a href="http://docs.mongodb.org/manual/tutorial/calculate-distances-using-spherical-geometry-with-2d-geospatial-indexes/#geospatial-indexes-distance-multiplier">distanceMultiplier attribute</a> and select for instance the earth radius in miles which is 3959. This will show all distances in miles:</p>

<pre><code>&gt; db.runCommand({geoNear: "locations", near: [-122.3937, 37.7955], num: 10, spherical:true,
distanceMultiplier: 3959})
</code></pre>

<p>If you want to restrict the search to a radius like 10 miles you&rsquo;ll have to use the maxDistance attribute:</p>

<pre><code>&gt; db.runCommand({geoNear: "locations", near: [-122.3937, 37.7955], num: 10, spherical:true,
distanceMultiplier: 3959, maxDistance:10/3959})
</code></pre>

<p>If you want kilometers use <strong>6371</strong>m as the radius of the earth.</p>

<p>Now that everything is working in the shell we can start with actual code.</p>

<h2>Node.js Code</h2>

<p>This example is written with CoffeeScript and has been extracted from an actual project and usually you would do more validation and parsing but you should get the idea on how the <a href="http://expressjs.com/">Express</a> route is working:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># app.coffee</span>
</span><span class='line'><span class="nv">express = </span><span class="nx">require</span> <span class="s">&#39;express&#39;</span>
</span><span class='line'><span class="nv">api = </span><span class="nx">require</span> <span class="s">&#39;./routes/api&#39;</span>
</span><span class='line'><span class="nv">app = module.exports = </span><span class="nx">express</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">apiVersion = </span><span class="s">&#39;v1&#39;</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span> <span class="s">&quot;/api/</span><span class="si">#{</span><span class="nx">apiVersion</span><span class="si">}</span><span class="s">/location&quot;</span><span class="p">,</span> <span class="nx">api</span><span class="p">.</span><span class="nx">location</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span> <span class="s">&quot;/api/</span><span class="si">#{</span><span class="nx">apiVersion</span><span class="si">}</span><span class="s">/location&quot;</span><span class="p">,</span> <span class="nx">api</span><span class="p">.</span><span class="nx">location</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># routes/api.coffee</span>
</span><span class='line'><span class="nv">mongo = </span><span class="nx">require</span> <span class="s">&#39;mongodb&#39;</span>
</span><span class='line'><span class="nv">assert = </span><span class="nx">require</span> <span class="s">&#39;assert&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ObjectID = </span><span class="nx">mongo</span><span class="p">.</span><span class="nx">BSONPure</span><span class="p">.</span><span class="nx">ObjectID</span>
</span><span class='line'>
</span><span class='line'><span class="nv">dbConnection = </span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGOHQ_URL</span> <span class="o">or</span> <span class="s">&#39;mongodb://localhost/mydbname&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">locations = </span><span class="kc">null</span>
</span><span class='line'><span class="nv">db = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mongo</span><span class="p">.</span><span class="nx">Db</span><span class="p">.</span><span class="nx">connect</span> <span class="nx">dbConnection</span><span class="p">,</span> <span class="nf">(err, database) -&gt;</span>
</span><span class='line'>  <span class="nv">db = </span><span class="nx">database</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">database</span><span class="p">.</span><span class="nx">collection</span> <span class="s">&#39;locations&#39;</span><span class="p">,</span> <span class="nf">(err, collection) -&gt;</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>    <span class="nv">locations = </span><span class="nx">collection</span>
</span><span class='line'>
</span><span class='line'><span class="nv">exports.location = </span><span class="nf">(req, res) -&gt;</span>
</span><span class='line'>  <span class="k">switch</span> <span class="nx">req</span><span class="p">.</span><span class="nx">method</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Create location</span>
</span><span class='line'>    <span class="k">when</span> <span class="s">&#39;POST&#39;</span>
</span><span class='line'>      <span class="c1"># In this example I am using upsert to update the record with the existing _id when present or create a new ObjectID if not:</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">location = </span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span>
</span><span class='line'>      <span class="nv">location.loc = </span><span class="p">[</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">loc</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">loc</span><span class="p">[</span><span class="mi">1</span><span class="p">])]</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">isUpdate = </span><span class="nx">location</span><span class="p">.</span><span class="nx">_id</span><span class="o">?</span>
</span><span class='line'>      <span class="nv">id = </span><span class="k">if</span> <span class="nx">isUpdate</span> <span class="k">then</span> <span class="nx">location</span><span class="p">.</span><span class="nx">_id</span> <span class="k">else</span> <span class="k">new</span> <span class="nx">ObjectID</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">locations</span><span class="p">.</span><span class="nx">update</span> <span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="nx">id</span><span class="p">},</span> <span class="nx">location</span><span class="p">,</span> <span class="p">{</span><span class="nx">upsert</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span> <span class="nx">safe</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span> <span class="nf">(err, result) -&gt;</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">location</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Query locations</span>
</span><span class='line'>    <span class="k">when</span> <span class="s">&#39;GET&#39;</span>
</span><span class='line'>      <span class="nv">lat = </span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">[</span><span class="s">&quot;lat&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">lon = </span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">[</span><span class="s">&quot;lon&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="nx">lat</span> <span class="o">and</span> <span class="nx">lon</span>
</span><span class='line'>        <span class="nv">lat = </span><span class="nb">parseFloat</span> <span class="nx">lat</span>
</span><span class='line'>        <span class="nv">lon = </span><span class="nb">parseFloat</span> <span class="nx">lon</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># validate that lat/lon are numeric</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span> <span class="mi">400</span> <span class="k">if</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">lat</span><span class="p">)</span> <span class="o">or</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">lon</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># validate that lat/lon are in the right range</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span> <span class="mi">400</span> <span class="k">if</span> <span class="nx">lon</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">180</span> <span class="o">or</span> <span class="nx">lat</span> <span class="o">&gt;</span> <span class="mi">180</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">geoNear = </span>
</span><span class='line'>          <span class="nv">geoNear: </span><span class="nx">locations</span>
</span><span class='line'>          <span class="nv">near: </span><span class="p">[</span><span class="nx">lon</span><span class="p">,</span> <span class="nx">lat</span><span class="p">]</span>
</span><span class='line'>          <span class="nv">spherical: </span><span class="kc">true</span>
</span><span class='line'>          <span class="nv">maxDistance: </span><span class="mi">10</span> <span class="o">/</span> <span class="mi">3959</span>
</span><span class='line'>          <span class="nv">distanceMultiplier: </span><span class="mi">3959</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">db</span><span class="p">.</span><span class="nx">command</span> <span class="nx">geoNear</span><span class="p">,</span> <span class="nf">(err, locations) -&gt;</span>
</span><span class='line'>          <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span> <span class="nx">locations</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Node.js Express Routes]]></title>
    <link href="http://srohde.github.io/blog/2013/06/08/testing-node-dot-js-routes/"/>
    <updated>2013-06-08T06:47:00-07:00</updated>
    <id>http://srohde.github.io/blog/2013/06/08/testing-node-dot-js-routes</id>
    <content type="html"><![CDATA[<p>Lately I needed some tests for an <a href="http://expressjs.com/">Express</a> <a href="http://nodejs.org/">Node.js</a> project I was working on and I was surprised how easy and minimalistic the code can look like with <a href="http://coffeescript.org">CoffeeScript</a>. Check out this gist:</p>

<div><script src='https://gist.github.com/4229691.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>I am using <a href="https://github.com/visionmedia/should.js/">should.js</a> as the assertion library and <a href="http://visionmedia.github.io/mocha/">mocha</a> as the testing framework. In this example I am testing a login function. My Node.js route (api.coffee) is being imported and then I&rsquo;ll first test if the login function actually exists. After that I am invoking the login function and make assertions against the result. The implemented function signature looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">exports.login = </span><span class="nf">(req, res) -&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The parameters are request and response. This route is using GET so for the request parameter we&rsquo;ll specify the query parameters.
When the implementation is done with the login execution it&rsquo;ll call <code>res.send(result)</code> so it&rsquo;s perfect to hook into that as well and we can do assertions against the result type and value.</p>

<p>If you are new to CoffeeScript this might look a bit cryptic but let me show you how the JavaScript would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">//</span> <span class="nx">Generated</span> <span class="k">by</span> <span class="nx">CoffeeScript</span> <span class="mf">1.6</span><span class="p">.</span><span class="mi">2</span>
</span><span class='line'><span class="p">(</span><span class="nx">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">var</span> <span class="nx">api</span><span class="p">,</span> <span class="nx">should</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">should = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;should&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">api = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;../../routes/api&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s">&#39;api&#39;</span><span class="p">,</span> <span class="nx">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">describe</span><span class="p">(</span><span class="s">&#39;#login()&#39;</span><span class="p">,</span> <span class="nx">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">it</span><span class="p">(</span><span class="s">&#39;should login a user&#39;</span><span class="p">,</span> <span class="nx">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">api</span><span class="p">.</span><span class="nx">login</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s">&#39;function&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">api</span><span class="p">.</span><span class="nx">login</span><span class="p">({</span>
</span><span class='line'>          <span class="nv">query: </span><span class="p">{</span>
</span><span class='line'>            <span class="nv">email: </span><span class="s">&quot;foo@gmail.com&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nv">password: </span><span class="s">&quot;secret&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">send: </span><span class="nx">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">result</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s">&#39;object&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">result</span><span class="p">.</span><span class="nx">email</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s">&quot;foo@gmail.com&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Blog with Octopress]]></title>
    <link href="http://srohde.github.io/blog/2013/06/07/blog-with-octopress/"/>
    <updated>2013-06-07T17:36:00-07:00</updated>
    <id>http://srohde.github.io/blog/2013/06/07/blog-with-octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been <a href="http://soenkerohde.com">blogging using Workpress</a> since February 2005 and I think Wordpress made the Internet a better place. Luckily I never got hacked but there are just too many stories that sites got hijacked that I finally decided to switch to a static blog. Github pages with <a href="http://octopress.org/">Octopress</a> seemed like a perfect fit for my needs so here we are.</p>

<p>The setup is dead simple so here my steps:</p>

<p>Created a new Github repo <code>srohde.github.io</code> and a bunch of command lines to initialize Octopress:</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
gem install bundler
bundle install
rake install
rake setup_github_pages\[git@github.com:srohde/srohde.github.io.git\] 
rake generate &amp; rake deploy
</code></pre>

<p>Bam! The <a href="http://srohde.github.io">static site</a> is up! Now also commit the sources to the source branch:</p>

<pre><code>git add .
git commit -am "initial commit"
git push origin source
</code></pre>

<p>Creating a first post (this very one) couldn&rsquo;t be easier:</p>

<pre><code>rake new_post\["Blog with Octopress"\]
subl source/_posts/2013-06-07-blog-with-octopress.markdown
rake generate &amp; rake deploy
</code></pre>

<p>And committing the updated and new sources again:</p>

<pre><code>git add .
git commit -am "first post"
git push origin source
</code></pre>

<p>Bamgain (did I just invent that?)! I&rsquo;ve got a bunch of topics I wanted to blog about and having a new blogging engine will motivate me to actually do so. That&rsquo;s how devs tick I guess. Cheers!</p>
]]></content>
  </entry>
  
</feed>
