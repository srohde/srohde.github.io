<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sönke Rohde]]></title>
  <link href="http://srohde.github.io/atom.xml" rel="self"/>
  <link href="http://srohde.github.io/"/>
  <updated>2013-06-10T00:11:49-07:00</updated>
  <id>http://srohde.github.io/</id>
  <author>
    <name><![CDATA[Sönke Rohde]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Node.js Express Routes]]></title>
    <link href="http://srohde.github.io/blog/2013/06/08/testing-node-dot-js-routes/"/>
    <updated>2013-06-08T06:47:00-07:00</updated>
    <id>http://srohde.github.io/blog/2013/06/08/testing-node-dot-js-routes</id>
    <content type="html"><![CDATA[<p>Lately I needed some tests for an <a href="http://expressjs.com/">Express</a> <a href="http://nodejs.org/">Node.js</a> project I was working on and I was surprised how easy and minimalistic the code can look like with <a href="http://coffeescript.org">CoffeeScript</a>. Check out this gist:</p>

<div><script src='https://gist.github.com/4229691.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>I am using <a href="https://github.com/visionmedia/should.js/">should.js</a> as the assertion library and <a href="http://visionmedia.github.io/mocha/">mocha</a> as the testing framework. In this example I am testing a login function. My Node.js route (api.coffee) is being imported and then I&rsquo;ll first test if the login function actually exists. After that I am invoking the login function and make assertions against the result. The implemented function signature looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">exports.login = </span><span class="nf">(req, res) -&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The parameters are request and response. This route is using GET so for the request parameter we&rsquo;ll specify the query parameters.
When the implementation is done with the login execution it&rsquo;ll call <code>res.send(result)</code> so it&rsquo;s perfect to hook into that as well and we can do assertions against the result type and value.</p>

<p>If you are new to CoffeeScript this might look a bit cryptic but let me show you how the JavaScript would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">//</span> <span class="nx">Generated</span> <span class="k">by</span> <span class="nx">CoffeeScript</span> <span class="mf">1.6</span><span class="p">.</span><span class="mi">2</span>
</span><span class='line'><span class="p">(</span><span class="nx">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">var</span> <span class="nx">api</span><span class="p">,</span> <span class="nx">should</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">should = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;should&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">api = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;../../routes/api&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s">&#39;api&#39;</span><span class="p">,</span> <span class="nx">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">describe</span><span class="p">(</span><span class="s">&#39;#login()&#39;</span><span class="p">,</span> <span class="nx">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">it</span><span class="p">(</span><span class="s">&#39;should login a user&#39;</span><span class="p">,</span> <span class="nx">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">api</span><span class="p">.</span><span class="nx">login</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s">&#39;function&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">api</span><span class="p">.</span><span class="nx">login</span><span class="p">({</span>
</span><span class='line'>          <span class="nv">query: </span><span class="p">{</span>
</span><span class='line'>            <span class="nv">email: </span><span class="s">&quot;foo@gmail.com&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nv">password: </span><span class="s">&quot;secret&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">send: </span><span class="nx">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">result</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s">&#39;object&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">result</span><span class="p">.</span><span class="nx">email</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s">&quot;foo@gmail.com&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Blog with Octopress]]></title>
    <link href="http://srohde.github.io/blog/2013/06/07/blog-with-octopress/"/>
    <updated>2013-06-07T17:36:00-07:00</updated>
    <id>http://srohde.github.io/blog/2013/06/07/blog-with-octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been <a href="http://soenkerohde.com">blogging using Workpress</a> since February 2005 and I think Wordpress made the Internet a better place. Luckily I never got hacked but there are just too many stories that sites got hijacked that I finally decided to switch to a static blog. Github pages with <a href="http://octopress.org/">Octopress</a> seemed like a perfect fit for my needs so here we are.</p>

<p>The setup is dead simple so here my steps:</p>

<p>Created a new Github repo <code>srohde.github.io</code> and a bunch of command lines to initialize Octopress:</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
gem install bundler
bundle install
rake install
rake setup_github_pages\[git@github.com:srohde/srohde.github.io.git\] 
rake generate &amp; rake deploy
</code></pre>

<p>Bam! The <a href="http://srohde.github.io">static site</a> is up! Now also commit the sources to the source branch:</p>

<pre><code>git add .
git commit -am "initial commit"
git push origin source
</code></pre>

<p>Creating a first post (this very one) couldn&rsquo;t be easier:</p>

<pre><code>rake new_post\["Blog with Octopress"\]
subl source/_posts/2013-06-07-blog-with-octopress.markdown
rake generate &amp; rake deploy
</code></pre>

<p>And committing the updated and new sources again:</p>

<pre><code>git add .
git commit -am "first post"
git push origin source
</code></pre>

<p>Bamgain (did I just invent that?)! I&rsquo;ve got a bunch of topics I wanted to blog about and having a new blogging engine will motivate me to actually do so. That&rsquo;s how devs tick I guess. Cheers!</p>
]]></content>
  </entry>
  
</feed>
