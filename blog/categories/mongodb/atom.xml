<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mongodb, | Sönke Rohde]]></title>
  <link href="http://srohde.github.io/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://srohde.github.io/"/>
  <updated>2013-06-25T22:00:14-07:00</updated>
  <id>http://srohde.github.io/</id>
  <author>
    <name><![CDATA[Sönke Rohde]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Location Based Services with MongoDB]]></title>
    <link href="http://srohde.github.io/blog/2013/06/11/location-based-services-with-mongodb/"/>
    <updated>2013-06-11T08:00:00-07:00</updated>
    <id>http://srohde.github.io/blog/2013/06/11/location-based-services-with-mongodb</id>
    <content type="html"><![CDATA[<p><a href="http://www.mongodb.org/">MongoDB</a> is an open-source NoSQL database. It offers great features to build <a href="https://en.wikipedia.org/wiki/Location-based_service">Location Based Services</a> with build in support for <a href="http://docs.mongodb.org/manual/applications/geospatial-indexes/">Geospatial Indexes and Queries</a>.</p>

<p>I&rsquo;ve been using MongoDB with <a href="http://nodejs.org">Node.js</a> on <a href="http://heroku.com">Heroku</a> so here a quick walk through on how to set it up and use it:</p>

<h2>Setup</h2>

<h3>Local</h3>

<p>Install and Run:</p>

<pre><code>$ brew install mongo
$ mongod
</code></pre>

<p>On lesson I&rsquo;ve learned is to always try to use MongoDB from the shell first before you start with actual code. <strong>After</strong> having the command right in the shell translate it into code and test your actual implementation. Here some shell commands to get you started:</p>

<pre><code>$ mongo
&gt; use mydbname
</code></pre>

<p>For this example we store locations in a collection called <code>locations</code>
Make sure you have set the geo spacial index:</p>

<pre><code>&gt; db.locations.ensureIndex({loc: '2d'})
&gt; db.locations.getIndexKeys()
</code></pre>

<p>Should output <code>[ { "_id" : 1 }, { "loc" : "2d" } ]</code></p>

<h3>Heroku</h3>

<p>On the Heroku side it&rsquo;s pretty easy to set up as well:</p>

<pre><code>$ heroku addons:add mongohq:sandbox
</code></pre>

<p>To make sure the location index is also working on Heroku, login, select your app and select the MongoHQ add-on. This brings you to the MongoHQ admin interface. Then select your locations collection and make sure the <code>Indexes</code> are configured correctly. In my case it shows as <code>{ key: { loc: "2d" }, v: 1, ns: "appXXX.locations", name: "loc_2d" }</code></p>

<h2>MongoDB Shell</h2>

<h3>Insert Location</h3>

<p>When you insert a new location it&rsquo;s essential to store the location in an array with [lon, lat] and <strong>not</strong> [lat, lon]. This was a mistake I made first and it took me a while to figure that out because all my queries were returning the wrong stuff.</p>

<p>Let&rsquo;s insert some example locations (I&rsquo;ve been using <a href="http://www.latlong.net/">LATLONG.net</a>):</p>

<pre><code>&gt; db.locations.insert({name: "Ferry Building", city: "San Francisco", loc:[-122.3937, 37.7955]})
&gt; db.locations.insert({name: "Union Square", city: "San Francisco", loc:[-122.407437, 37.787994]})
&gt; db.locations.insert({name: "Duboce Park", city: "San Francisco", loc:[-122.433453, 37.769422]}) 
&gt; db.locations.insert({name: "Parque Ibirapuera", city: "São Paulo",loc:[-46.657490, -23.586996]})
&gt; db.locations.insert({name: "Big Ben", city: "London",loc:[-0.124575, 51.500705]})
&gt; db.locations.insert({name: "Fischmarkt", city: "Hamburg",loc:[9.937740, 53.544527]})
&gt; db.locations.insert({name: "Opera House", city: "Sydney",loc:[151.214993, -33.857767]})
</code></pre>

<p>Now you can query all locations with:</p>

<pre><code>&gt; db.locations.find()
</code></pre>

<p>Just as a sanity check: Everything west of Greenwich has a longitude &lt; 0 and east > 0. Everything in the northern hemisphere has a latitude > 0 and in the southern hemisphere &lt; 0 or as Wikipedia puts it:</p>

<p><blockquote><p>In geography, latitude (φ) is a geographic coordinate that specifies the north-south position of a point on the Earth&rsquo;s surface. Latitude is an angle (defined below) which ranges from 0° at the Equator to 90° (North or South) at the poles.</p><footer><strong><a href="http://en.wikipedia.org/wiki/Latitude">http://en.wikipedia.org/wiki/Latitude</a></strong></footer></blockquote></p>

<p><blockquote><p>Longitude (/ˈlɒndʒɨtjuːd/ or /ˈlɒŋɡɨtjuːd/),[1] is a geographic coordinate that specifies the east-west position of a point on the Earth&rsquo;s surface. [&hellip;] The longitude of other places is measured as an angle east or west from the Prime Meridian, ranging from 0° at the Prime Meridian to +180° eastward and −180° westward.</p><footer><strong><a href="http://en.wikipedia.org/wiki/Longitude">http://en.wikipedia.org/wiki/Longitude</a></strong></footer></blockquote></p>

<h3>Query Locations</h3>

<p>After we have inserted some test locations let&rsquo;s try to make a geospatial query. In my case I wanted to find locations close to the current location so let&rsquo;s pretend we are at the Ferry Building in San Francisco.</p>

<pre><code>&gt; db.runCommand({geoNear: "locations", near: [-122.3937, 37.7955], num: 10, spherical:true})
</code></pre>

<p>The result is ordered by distance and the Ferry Building should be on top with a <code>dis</code> of 0. To have the distance in a human readable unit you can use the <a href="http://docs.mongodb.org/manual/tutorial/calculate-distances-using-spherical-geometry-with-2d-geospatial-indexes/#geospatial-indexes-distance-multiplier">distanceMultiplier attribute</a> and select for instance the earth radius in miles which is 3959. This will show all distances in miles:</p>

<pre><code>&gt; db.runCommand({geoNear: "locations", near: [-122.3937, 37.7955], num: 10, spherical:true,
distanceMultiplier: 3959})
</code></pre>

<p>If you want to restrict the search to a radius like 10 miles you&rsquo;ll have to use the maxDistance attribute:</p>

<pre><code>&gt; db.runCommand({geoNear: "locations", near: [-122.3937, 37.7955], num: 10, spherical:true,
distanceMultiplier: 3959, maxDistance:10/3959})
</code></pre>

<p>If you want kilometers use <strong>6371</strong>m as the radius of the earth.</p>

<p>Now that everything is working in the shell we can start with actual code.</p>

<h2>Node.js Code</h2>

<p>This example is written with CoffeeScript and has been extracted from an actual project and usually you would do more validation and parsing but you should get the idea on how the <a href="http://expressjs.com/">Express</a> route is working:</p>

<p>``` coffeescript</p>

<h1>app.coffee</h1>

<p>express = require &lsquo;express&rsquo;
api = require &lsquo;./routes/api&rsquo;
app = module.exports = express()</p>

<p>apiVersion = &lsquo;v1&rsquo;
app.post &ldquo;/api/#{apiVersion}/location&rdquo;, api.location
app.get &ldquo;/api/#{apiVersion}/location&rdquo;, api.location
```</p>

<p>``` coffeescript</p>

<h1>routes/api.coffee</h1>

<p>mongo = require &lsquo;mongodb&rsquo;
assert = require &lsquo;assert&rsquo;</p>

<p>ObjectID = mongo.BSONPure.ObjectID</p>

<p>dbConnection = process.env.MONGOHQ_URL or &lsquo;mongodb://localhost/mydbname&rsquo;</p>

<p>locations = null
db = null</p>

<p>mongo.Db.connect dbConnection, (err, database) &ndash;>
  db = database
  assert.equal null, err</p>

<p>  database.collection &lsquo;locations&rsquo;, (err, collection) &ndash;></p>

<pre><code>assert.equal null, err
locations = collection
</code></pre>

<p>exports.location = (req, res) &ndash;>
  switch req.method</p>

<pre><code># Create location
when 'POST'
  # In this example I am using upsert to update the record with the existing _id when present or create a new ObjectID if not:

  location = req.body
  location.loc = [parseFloat(location.loc[0]), parseFloat(location.loc[1])]

  isUpdate = location._id?
  id = if isUpdate then location._id else new ObjectID()

  locations.update {_id:id}, location, {upsert:true, safe:true}, (err, result) -&gt;
    assert.equal null, err
    res.send JSON.stringify(location)

# Query locations
when 'GET'
  lat = req.query["lat"]
  lon = req.query["lon"]

  if lat and lon
    lat = parseFloat lat
    lon = parseFloat lon

    # validate that lat/lon are numeric
    return res.send 400 if isNaN(lat) or isNaN(lon)

    # validate that lat/lon are in the right range
    return res.send 400 if lon &lt; -180 or lat &gt; 180

    geoNear = 
      geoNear: locations
      near: [lon, lat]
      spherical: true
      maxDistance: 10 / 3959
      distanceMultiplier: 3959

    db.command geoNear, (err, locations) -&gt;
      assert.equal null, err
      res.send locations
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
