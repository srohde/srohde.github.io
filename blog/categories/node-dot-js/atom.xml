<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node.js, | Sönke Rohde]]></title>
  <link href="http://srohde.github.io/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://srohde.github.io/"/>
  <updated>2013-06-08T12:26:13-07:00</updated>
  <id>http://srohde.github.io/</id>
  <author>
    <name><![CDATA[Sönke Rohde]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Node.js Express Routes]]></title>
    <link href="http://srohde.github.io/blog/2013/06/08/testing-node-dot-js-routes/"/>
    <updated>2013-06-08T06:47:00-07:00</updated>
    <id>http://srohde.github.io/blog/2013/06/08/testing-node-dot-js-routes</id>
    <content type="html"><![CDATA[<p>Lately I needed some tests for an <a href="http://expressjs.com/">Express</a> <a href="http://nodejs.org/">Node.js</a> project I was working on and I was surprised how easy and minimalistic the code can look like with <a href="http://coffeescript.org">CoffeeScript</a>. Check out this gist:</p>

<p><div><script src='https://gist.github.com/4229691.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>I am using <a href="https://github.com/visionmedia/should.js/">should.js</a> as the assertion library and <a href="http://visionmedia.github.io/mocha/">mocha</a> as the testing framework. In this example I am testing a login function. My Node.js route (api.coffee) is being imported and then I&rsquo;ll first test if the login function actually exists. After that I am invoking the login function and make assertions against the result. The implemented function signature looks like this:</p>

<p><code>coffeescript
exports.login = (req, res) -&gt;
</code></p>

<p>The parameters are request and response. This route is using GET so for the request parameter we&rsquo;ll specify the query parameters.
When the implementation is done with the login execution it&rsquo;ll call <code>res.send(result)</code> so it&rsquo;s perfect to hook into that as well and we can do assertions against the result type and value.</p>

<p>If you are new to CoffeeScript this might look a bit cryptic but let me show you how the JavaScript would look like:</p>

<pre><code>// Generated by CoffeeScript 1.6.2
(function() {
  var api, should;

  should = require('should');

  api = require('../../routes/api');

  describe('api', function() {
    return describe('#login()', function() {
      return it('should login a user', function(done) {
        api.login.should.be.a('function');
        return api.login({
          query: {
            email: "foo@gmail.com",
            password: "secret"
          }
        }, {
          send: function(result) {
            result.should.be.a('object');
            result.email.should.equal("foo@gmail.com");
            return done();
          }
        });
      });
    });
  });

}).call(this);
</code></pre>
]]></content>
  </entry>
  
</feed>
